import re
import os
import datetime
import py3Dmol as p3d
import numpy as np

def tempgro(output,all_array):
        atoms_number = len(all_array)

        newgro = []
        with open(output, "w") as fp:
            newgro.append("generated by MOF_BUILD" + "\n" + str(atoms_number) + "\n")
            for i in range(atoms_number):
                line = all_array[i]

                value_atom_number = int(i + 1)  # atom_number
                value_label = re.sub('\d','',line[0])+re.sub('\D','',line[2])  # atom_label
                value_resname = str(line[4])[0:3]  # residue_name
                value_resnumber = int(line[5]) # residue number
                value_x = 0.1*float(line[6])  # x
                value_y = 0.1*float(line[7])  # y
                value_z = 0.1*float(line[8])  # z
                formatted_line = "%5d%-5s%5s%5d%8.3f%8.3f%8.3f" % (
                    value_resnumber,
                    value_resname,
                    value_label,
                    value_atom_number,
                    value_x,
                    value_y,
                    value_z,
                )
                newgro.append(formatted_line + "\n")
            tail = "100 100 100 \n"
            newgro.append(tail)
            fp.writelines(newgro)

def outxyz(output,all_array):
    atoms_number = len(all_array)
    newxyz = []
    with open(output, "w") as fp:
        newxyz.append(str(atoms_number) + "\n" + "generated by MOF_BUILD" + os.path.basename(output).removesuffix('.xyz')+"\n")
        for i in range(atoms_number):
            row = all_array[i]
            value_label = row[0]   # atom_label
            value_label = re.sub(r"\d", "", value_label)
            value_x = float(row[1])  # x
            value_y = float(row[2])  # y
            value_z = float(row[3])  # z
            formatted_line = "%-5s%8.3f%8.3f%8.3f" % (
                value_label,
                value_x,
                value_y,
                value_z,
            )
            newxyz.append(formatted_line + "\n")
        fp.writelines(newxyz)

def viewgro(groname):
         viewer = p3d.view(width=400, height=400)
         viewer.addModelsAsFrames(open(groname, "r").read(), "gro", {"keepH": True})
         viewer.setStyle({"stick": {}, "sphere": {"scale": 0.25}})
         viewer.zoomTo()
         viewer.show()

def viewxyz(xyzname):
         viewer = p3d.view(width=400, height=400)
         viewer.addModelsAsFrames(open(xyzname, "r").read(), "xyz", {"keepH": True})
         viewer.setStyle({"stick": {}, "sphere": {"scale": 0.25}})
         viewer.zoomTo()
         viewer.show()



def temp_xyz(output,placed_all):
    atoms_number = len(placed_all)
    newxyz = []
    with open( output, "w") as fp:
        newxyz.append(str(atoms_number) + "\n" + "generated by MOF_BUILD" + "\n")
        for i in range(atoms_number):

            value_label = placed_all[i][0]   # atom_label
            value_label = re.sub(r"\d", "", value_label)
            value_x = float(placed_all[i][-3])  # x
            value_y = float(placed_all[i][-2])   # y
            value_z = float(placed_all[i][-1])   # z
            formatted_line = "%-5s%8.3f%8.3f%8.3f" % (
                value_label,
                value_x,
                value_y,
                value_z,
            )
            newxyz.append(formatted_line + "\n")
        fp.writelines(newxyz)



def outxyz(output,all_array,sc_unit_cell):
    sc_a,sc_b,sc_c = sc_unit_cell
    atoms_number = len(all_array)
    newxyz = []
    with open(output, "w") as fp:
        newxyz.append(str(atoms_number) + "\n" + "generated by MOF_BUILD" + "\n")
        for i in range(atoms_number):
            row = all_array[i]
            value_label = row[0]   # atom_label
            value_label = re.sub(r"\d", "", value_label)
            value_x = sc_a*float(row[1])  # x
            value_y = sc_b*float(row[2])  # y
            value_z = sc_c*float(row[3])  # z
            formatted_line = "%-5s%8.3f%8.3f%8.3f" % (
                value_label,
                value_x,
                value_y,
                value_z,
            )
            newxyz.append(formatted_line + "\n")
        fp.writelines(newxyz)
#
#def outpdb(output,all_array):
#
#        atoms_number = len(all_array)
#
#        newpdb = []
#        newpdb.append("generated by MOF_BUILD" + "\n")
#        newpdb.append(str(atoms_number) + "\n")
#        with open(output, "w") as fp:
#            # Iterate over each line in the input file
#            for i in range(atoms_number):
#                line = all_array[i]
#                # Extract values based on their positions in the format string
#                value1 = "ATOM"
#                value2 = int(i + 1)
#                value3 = line[5]
#                value4 = str(line[7])[0]  # residue
#                value5 = line[6]  # residue number
#                value6 = sc_a*float(line[1])  # x
#                value7 = sc_b*float(line[2])  # y
#                value8 = sc_c*float(line[3])  # z
#                value9 = "1.00"
#                value10 = "0.00"
#                value11 = re.sub(r"\d", "", line[0]) # note
#                # Format the values using the specified format string
#                formatted_line = "%-6s%5d%5s%4s%10d%8.3f%8.3f%8.3f%6s%6s%4s" % (
#                    value1,
#                    value2,
#                    value3,
#                    value4,
#                    value5,
#                    value6,
#                    value7,
#                    value8,
#                    value9,
#                    value10,
#                    value11,
#                )
#                newpdb.append(formatted_line + "\n")
#            fp.writelines(newpdb)
#
#def outgro(output,all_array):
#        atoms_number = len(all_array)
#
#        newgro = []
#        with open(output, "w") as fp:
#            newgro.append("generated by MOF_BUILD" + "\n" + str(atoms_number) + "\n")
#            for i in range(atoms_number):
#                line = all_array[i]
#
#                value_atom_number = int(i + 1)  # atom_number
#                value_label = line[0]  # atom_label
#                value_resname = str(line[7])[0]  # residue_name
#                value_resnumber = line[6] # residue number
#                value_x = 0.1*sc_a*float(line[1])  # x
#                value_y = 0.1*sc_b*float(line[2])  # y
#                value_z = 0.1*sc_c*float(line[3])  # z
#                formatted_line = "%5d%-5s%5s%5d%8.3f%8.3f%8.3f" % (
#                    value_resnumber,
#                    value_resname,
#                    value_label,
#                    value_atom_number,
#                    value_x,
#                    value_y,
#                    value_z,
#                )
#                newgro.append(formatted_line + "\n")
#            tail = "5 5 5 \n"
#            newgro.append(tail)
#            fp.writelines(newgro)
#            
#

def write_cif_nobond(placed_all, params, cifname,unit_cell):
	a,b,c,alpha,beta,gamma = params
	os.makedirs('output_cifs',exist_ok=True)

	opath = os.path.join('output_cifs', cifname)
	
	with open(opath, 'w') as new_cif:
		new_cif.write('data_' + cifname[0:-4] + '\n')
		new_cif.write('_audit_creation_date              ' + datetime.datetime.today().strftime('%Y-%m-%d') + '\n')
		new_cif.write("_audit_creation_method            'MOFbuilder_1.0'" + '\n')
		new_cif.write("_symmetry_space_group_name_H-M    'P1'" + '\n')
		new_cif.write('_symmetry_Int_Tables_number       1' + '\n')
		new_cif.write('_symmetry_cell_setting            triclinic' + '\n')
		new_cif.write('loop_' + '\n')
		new_cif.write('_symmetry_equiv_pos_as_xyz' + '\n')
		new_cif.write('  x,y,z' + '\n')
		new_cif.write('_cell_length_a                    ' + str(a) + '\n')
		new_cif.write('_cell_length_b                    ' + str(b) + '\n')
		new_cif.write('_cell_length_c                    ' + str(c) + '\n')
		new_cif.write('_cell_angle_alpha                 ' + str(alpha) + '\n')
		new_cif.write('_cell_angle_beta                  ' + str(beta) + '\n')
		new_cif.write('_cell_angle_gamma                 ' + str(gamma) + '\n')
		new_cif.write('loop_' + '\n')
		new_cif.write('_atom_site_label' + '\n')
		new_cif.write('_atom_site_type_symbol' + '\n')
		new_cif.write('_atom_site_fract_x' + '\n')
		new_cif.write('_atom_site_fract_y' + '\n')
		new_cif.write('_atom_site_fract_z' + '\n')
		

		for line in placed_all:
			atom = line[0]
			f_coords = list(map(float, line[1:4]))
			c_coords = np.dot(np.linalg.inv(unit_cell), f_coords)
			new_cif.write('{:7} {:>4} {:>15.10f} {:>15.10f} {:>15.10f}'.format(
				atom, 
				re.sub('[0-9]', '', atom),  #atom type
				np.round(c_coords[0], 10), 
				np.round(c_coords[1], 10), 
				np.round(c_coords[2], 10)))
			new_cif.write('\n')

		new_cif.write('loop_' + '\n')